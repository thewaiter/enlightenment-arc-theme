group { name: "e/widgets/toolbar";
   IMAGE_SET("arrow-left", 14, 14)
   IMAGE_SET("arrow-right", 14, 14)
#define PRESSED 1
#define HOVER   2
   script {
      public ar_l_mode;
      public eval_l_mode(m) {
         new p = m & PRESSED;
         new h = m & HOVER;
         if (!p) {
            if (!h) {
               set_state(PART:"arrow1", "default", 0.0);
            }
            else {
               set_state(PART:"arrow1", "hover", 0.0);
            }
           }
         else {
              set_state(PART:"arrow1", "clicked", 0.0);
         }
      }
      public ar_r_mode;
      public eval_r_mode(m) {
         new p = m & PRESSED;
         new h = m & HOVER;
         if (!p) {
            if (!h) {
               set_state(PART:"arrow2", "default", 0.0);
            }
            else {
               set_state(PART:"arrow2", "hover", 0.0);
            }
           }
         else {
              set_state(PART:"arrow2", "clicked", 0.0);
         }
      }
   }
   parts {
      rect { name: "base";
         description { state: "default" 0.0;
            rel1.offset: 2 0;
            rel2.offset: -3 0;
            color_class: "dialog_base";
         }
      }
      part {name: "focus"; type: RECT;
         mouse_events: 0;
         description {
            state: "default" 0.0;
            visible: 0;
            color: 255 255 255 0;
            color_class: "widget_bg_hover";
       }
        description {
            state: "focused" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            color: 255 255 255 255;
        }
      } 
      part { name: "clipper"; type: RECT;
         description { state: "default" 0.0;
            rel1.to_y: "base";
            rel1.to_x: "arrow1";
            rel1.relative: 1.0 0.0;
            rel2.to_y: "base";
            rel2.to_x: "arrow2";
            rel2.relative: 0.0 1.0;
         }
      }
      part { name: "e.swallow.content"; type: SWALLOW;
         clip_to: "clipper";
         description { state: "default" 0.0;
            rel1.to_y: "base";
            rel1.to_x: "arrow1";
            rel1.relative: 1.0 0.0;
            rel1.offset: 2 0;
            rel2.to_y: "base";
            rel2.to_x: "arrow2";
            rel2.relative: 0.0 1.0;
            rel2.offset: -3 -1;
//            rel1.to: "clipper";
//            rel2.to: "clipper";
         }
      }
      part { name: "e.dragable.hbar"; mouse_events: 0;
         dragable.x: 1 1 0;
         dragable.y: 0 0 0;
         dragable.confine: "base";
         description { state: "default" 0.0;
             rel1.to: "base";
             rel2.to: "base";
             visible: 0;
          }
       }
      part { name: "arrow_clipper"; type: RECT;
         description { state: "default" 0.0;
         }
         description { state: "hidden" 0.0;
            inherit: "default" 0.0;
            visible: 0;
         }
      }
      part { name: "arrow1"; mouse_events: 0;
         clip_to: "arrow_clipper";
         description { state: "default" 0.0;
            rel1.to: "arrow1_ev";
            rel2.to: "arrow1_ev";
            image.normal: "arrow-left";
            color_class: "list_item_arrow";
            FIXED_SIZE(14, 14)
         }
         description { state: "clicked" 0.0;
            inherit: "default" 0.0;
            color_class: "list_item_arrow_selected";
         }
         description { state: "hover" 0.0;
            inherit: "default" 0.0;
            color_class: "list_item_arrow_hover";
         }
      }
      part { name: "arrow1_ev"; type: RECT;
         scale: 1;
         clip_to: "arrow_clipper";
         description { state: "default" 0.0;
            rel1.to: "base";
            rel2.to: "base";
            align: 0.0 0.5;
            color: 0 0 0 0;
            FIXED_SIZE(23, 23)
         }
      }
      part { name: "arrow2"; mouse_events: 0;
         clip_to: "arrow_clipper";
         description { state: "default" 0.0;
            rel1.to: "arrow2_ev";
            rel2.to: "arrow2_ev";
            image.normal: "arrow-right";
            color_class: "list_item_arrow";
            FIXED_SIZE(14, 14)
         }
         description { state: "clicked" 0.0;
            inherit: "default" 0.0;
            color_class: "list_item_arrow_selected";
         }
         description { state: "hover" 0.0;
            inherit: "default" 0.0;
            color_class: "list_item_arrow_hover";
         }
      }
      part { name: "arrow2_ev"; type: RECT;
         scale: 1;
         clip_to: "arrow_clipper";
         description { state: "default" 0.0;
            rel1.to: "base";
            rel2.to: "base";
            align: 1.0 0.5;
            color: 0 0 0 0;
            FIXED_SIZE(23, 23)
         }
      }
   }
   programs {
      program {
         signal: "e,action,show,hbar"; source: "e";
         action: STATE_SET "default" 0.0;
         target: "arrow_clipper";
         target: "arrow_clipper";
      }
      program {
         signal: "e,action,hide,hbar"; source: "e";
         action: STATE_SET "hidden" 0.0;
         target: "arrow_clipper";
         target: "arrow_clipper";
      }
        program {
         name: "focus_in";
         signal: "e,state,focused"; source: "e";
         action: STATE_SET "focused" 0.0;
         transition: DECELERATE 0.2;
         target: "focus";
      }
      program {
         name: "focus_out";
         signal: "e,state,unfocused"; source: "e";
         action: STATE_SET "default" 0.0;
         transition: ACCELERATE 0.5;
         target: "focus";
      } 
      program {
         signal: "mouse,down,1*"; source: "arrow1_ev";
         action: SIGNAL_EMIT "e,action,prev" "e";
         after: "arrow1_repeat";
      }
      program { name: "arrow1_repeat";
         action: SIGNAL_EMIT "e,action,prev" "e";
         in: 0.3 0.0;
         after: "arrow1_repeat";
      }
      program {
         signal: "mouse,up,1"; source: "arrow1_ev";
         action: ACTION_STOP;
         target: "arrow1_repeat";
      }
      program {
         signal: "mouse,down,1*"; source: "arrow1_ev";
         script {
            new m = get_int(ar_l_mode);
            m |= PRESSED ; set_int(ar_l_mode, m);
            eval_l_mode(m);
         }
      }
      program {
         signal: "mouse,up,1"; source: "arrow1_ev";
         script {
            new m = get_int(ar_l_mode);
            m &= ~PRESSED ; set_int(ar_l_mode, m);
            eval_l_mode(m);
         }
      }
      program {
         signal: "mouse,in"; source: "arrow1_ev";
         script {
            new m = get_int(ar_l_mode);
            m |= HOVER ; set_int(ar_l_mode, m);
            eval_l_mode(m);
         }
      }
      program {
         signal: "mouse,out"; source: "arrow1_ev";
         script {
            new m = get_int(ar_l_mode);
            m &= ~HOVER ; set_int(ar_l_mode, m);
            eval_l_mode(m);
         }
      }
      program {
         signal: "mouse,down,1*"; source: "arrow2_ev";
         action: SIGNAL_EMIT "e,action,next" "e";
         after: "arrow2_repeat";
      }
      program { name: "arrow2_repeat";
         action: SIGNAL_EMIT "e,action,next" "e";
         in: 0.3 0.0;
         after: "arrow2_repeat";
      }
      program {
         signal: "mouse,up,1"; source: "arrow2_ev";
         action: ACTION_STOP;
         target: "arrow2_repeat";
      }
      program {
         signal: "mouse,down,1*"; source: "arrow2_ev";
         script {
            new m = get_int(ar_r_mode);
            m |= PRESSED ; set_int(ar_r_mode, m);
            eval_r_mode(m);
         }
      }
      program {
         signal: "mouse,up,1"; source: "arrow2_ev";
         script {
            new m = get_int(ar_r_mode);
            m &= ~PRESSED ; set_int(ar_r_mode, m);
            eval_r_mode(m);
         }
      }
      program {
         signal: "mouse,in"; source: "arrow2_ev";
         script {
            new m = get_int(ar_r_mode);
            m |= HOVER ; set_int(ar_r_mode, m);
            eval_r_mode(m);
         }
      }
      program {
         signal: "mouse,out"; source: "arrow2_ev";
         script {
            new m = get_int(ar_r_mode);
            m &= ~HOVER ; set_int(ar_r_mode, m);
            eval_r_mode(m);
         }
      }
   }
}
#undef PRESSED
#undef HOVER
group { name: "e/widgets/toolbar/item";

#define SELECTED 1
#define HOVER   2
   script {
      public it_mode;
      public eval_mode(m) {
         new s = m & SELECTED;
         new h = m & HOVER;
         if (!s) {
            if (!h) {
               set_state(PART:"base", "default", 0.0);
               set_state(PART:"border", "default", 0.0);
               set_state(PART:"e.text.label", "default", 0.0);
               set_state(PART:"bar", "default", 0.0);
            }
            else {
               set_state(PART:"base", "hover", 0.0);
               set_state(PART:"border", "hover", 0.0);
               set_state(PART:"e.text.label", "hover", 0.0);
               set_state(PART:"bar", "hover", 0.0);
            }
         } else {
            set_state(PART:"base", "selected", 0.0);
            set_state(PART:"border", "selected", 0.0);
            set_state(PART:"e.text.label", "selected", 0.0);
            set_state(PART:"bar", "selected", 0.0);
         }
      }
   }
   image: "bg-top-rounded-1px.png" COMP;
   image: "border-top-rounded-1px.png" COMP;
   parts {
      part { name: "base"; mouse_events: 0;
         description { state: "default" 0.0;
            image.normal: "bg-top-rounded-1px.png";
            image.border: 1 1 1 1;
            color_class: "toolbar_item_base";
            rel2.offset: -1 0;
         }
         description { state: "hover" 0.0;
            inherit: "default" 0.0;
            color_class: "toolbar_item_base_hover";
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            color_class: "ilist_item_base_selected";
         }
      }
      part { name: "border"; mouse_events: 0;
         description { state: "default" 0.0;
            // rel1.to: "base";
            // rel2.to: "base";
            image.normal: "border-top-rounded-1px.png";
            image.border: 1 1 1 1;
            color_class: "toolbar_item_border";
            rel2.offset: -1 0;
            image.middle: 0;
            visible: 0;
         }
         description { state: "hover" 0.0;
            inherit: "default" 0.0;
            color_class: "toolbar_item_border_hover";
            visible: 1;
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            color_class: "toolbar_item_border_selected";
            visible: 1;
         }
      }

      part { name: "e.swallow.icon"; type: SWALLOW;
         description { state: "default" 0.0;
            align: 0.5 0.5;
            // aspect: 1.0 1.0;
            // aspect_preference: VERTICAL;
            rel1.relative: 0.0 0.0;
            rel1.offset: 2 2;
            rel2.to_y: "e.text.label";
            rel2.relative: 1.0 0.0;
            rel2.offset: -3 -1;
         }
         description { state: "noicon" 0.0;
            inherit: "default" 0.0;
            visible: 0;
            rel1.offset: 2 0;
            rel2.relative: 1.0 0.0;
            rel2.offset: -3 -4;
         }
      }
      part { name: "e.text.label"; type: TEXT; mouse_events: 0;
         scale: 1;
         description { state: "default" 0.0;
            rel1.offset: 4 -3;
            rel1.relative: 0.0 1.0;
            rel2.offset: -5 -3;
            align: 0.5 1.0;
            color_class: "toolbar_item";
            text { font: FN; size: FNSIZE;
               min: 1 1;
               ellipsis: -1;
               align: 0.5 0.5;
               text_class: "toolbar_item";
            }
            fixed: 0 1;
         }
       description { state: "hover" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            color_class: "toolbar_item_hover";
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
            color_class: "toolbar_item_active";
         }
      }
      rect { name: "bar"; mouse_events: 0;
         description { state: "default" 0.0;
            rel1.relative: 0.0 1.0;
            rel1.to: "base";
            rel1.offset: 0 -2;
            rel2.to: "base";
            rel2.offset: 0 -1;
            align: 0.5 1.0;

            color_class: "toolbar_item_border";
            visible: 1;
         }
         description { state: "hover" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
         description { state: "selected" 0.0;
            inherit: "default" 0.0;
            // visible: 0;
            visible: 1;
         }
      }
      part { name: "event"; type: RECT;
         ignore_flags: ON_HOLD;
         description { state: "default" 0.0;
            color: 0 0 0 0;
         }
      }
   }
   programs {
      program {
         signal: "e,icon,disabled"; source: "e";
         action: STATE_SET "noicon" 0.0;
         target: "e.swallow.icon";
//         target: "e.text.label";
      }
      program {
         signal: "e,icon,enabled"; source: "e";
         action: STATE_SET "default" 0.0;
         target: "e.swallow.icon";
//         target: "e.text.label";
      }

      program {
         signal: "e,state,selected"; source: "e";
         script {
            new m = get_int(it_mode);
            m |= SELECTED;
            set_int(it_mode, m);
            eval_mode(m);
         }
      }
      program {
         signal: "e,state,unselected"; source: "e";
         script {
            new m = get_int(it_mode);
            m &= ~SELECTED;
            set_int(it_mode, m);
            eval_mode(m);
         }
      }
      program {
         signal: "mouse,in"; source: "event";
         script {
            new m = get_int(it_mode);
            m |= HOVER;
            set_int(it_mode, m);
            eval_mode(m);
         }
      }
      program {
         signal: "mouse,out"; source: "event";
         script {
            new m = get_int(it_mode);
            m &= ~HOVER;
            set_int(it_mode, m);
            eval_mode(m);
         }
      }
      program {
         signal: "mouse,up,1"; source: "event";
         action: SIGNAL_EMIT "e,action,click" "e";
      }
   }
}
#undef SELECTED
#undef HOVER
